name: "Terraform APPLY Deloyment"

on:
  workflow_dispatch:
    inputs:
      regions:
        description: 'AWS REGION'
        required: true 
        default: 'us-east-1'
      env:
        description: 'provide environment to deploy to'
        required: true 
        default: 'sbx'

jobs:
  terraform:
    name: 'build'
    runs-on: [self-hosted, aws-eks-test]

    env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         AWS_DEFAULT_REGION: us-east-1
    steps:
    - uses: actions/checkout@v1
    - name: Install Terraform
      run: |
        sudo apt install wget unzip
        TER_VER=`curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d: -f2 | tr -d \"\,\v | awk '{$1=$1};1'`
        wget https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_amd64.zip
        unzip terraform_${TER_VER}_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform --version
        ls -al && pwd

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
          
    - name: Terraform Init
      id: init
      run: |
        rm -rf .terraform
        terraform init -upgrade=true -no-color -input=false  
        
    - name: Terraform Create Workspace
      id: Workspaces
      run: |
        terraform workspace new ${{ github.event.inputs.env }} || terraform workspace select ${{ github.event.inputs.env }}
      continue-on-error: true   

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var-file="${{ github.event.inputs.env }}.tfvars"  -out="plan.${{ github.event.inputs.env }}" -no-color 
      continue-on-error: true  

    - name: Terraform Apply
      id: Apply
      run: |
        terraform apply "plan.${{ github.event.inputs.env }}"

  comment:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Thanks for reporting!'
            })  
